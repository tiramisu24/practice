Given a circular linked list, implement an algorithm which returns node at the beginning
of the loop.
DEFINITION
Circular linked list: A (corrupt) linked list in which a nodeâ€™s next pointer points to an
earlier node, so as to make a loop in the linked list.
EXAMPLE
input: A -> B -> C -> D -> E -> C [the same C as earlier]
output: C

#fast time complexity
#has larger space
def corrupt (list)
  set = Set.new()

  node = list.head

  until node.next.nil?
    return node if set.include?(node)
    set.add(node)
  end

end

#constant space
def corrupt2(list)
  fast = list.head.next
  slow = list.head

  until slow.next.nil?
    fast = fast.next.next
    slow = slow.next
    return fast if fast == slow
  end


end
