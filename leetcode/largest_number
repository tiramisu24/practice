public class Solution {
    public int numIslands(char[][] grid) {
        char[][] res = duplicate(grid);
        int m = grid.length;
        int n = grid[0].length;
        int count = 0;

        for(int i = 0; i <m; i++ ){
            for(int j = 0; j<n; j++){
                char tile = res[i][j]
                if(tile == '1'){
                    change(res, i,j);
                    count +=1;
                }
            }
        }
        return count;
    }

    public void change(char[][]res, x,y){
        if(res[x][y] == "1"){
            res[x][y] == "2";
        }else{
            return;
        }
        int[][] dirs = {{-1,0},{0,-1},{1,0},{0,1}};
        for(int i = 0; i<dirs.length; i++){
            int idir = dirs[i][0];
            int jdir = dirs[i][1];
            if(isValid(idir,jdir, res){
                change(res,i,j);
            }
        }
    }

    public boolean isValid(x,y, res){
        if(x<0 || x>=res.length || y<0 ||y>=res[0].length) return false;
        return true;
    }
    public char[][] dupliate(char[][] grid){
        int m = grid.length;
        int n = grid[0].length;
        char [][] res = new char[m][n];
        for(int i = 0; i <m; i++ ){
            for(int j = 0; j<n; j++){
                res[i][j] = grid[i][j];
            }
        }
        return res;
    }
}
