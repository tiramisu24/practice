Imagine a (literal) stack of plates. If the stack gets too high, it might topple. Therefore,
in real life, we would likely start a new stack when the previous stack exceeds
some threshold. Implement a data structure SetOfStacks that mimics this. SetOfStacks
should be composed of several stacks, and should create a new stack once
the previous one exceeds capacity. SetOfStacks.push() and SetOfStacks.pop() should
behave identically to a single stack (that is, pop() should return the same values as it
would if there were just a single stack).
FOLLOW UP
Implement a function popAt(int index) which performs a pop operation on a specifc
sub-stack.

def Stack
  def initialize
    @index = 0
    @stack= [[]]
  end

  def push (val)
    if @stack[index] > 25
      @index +=1
      @stack.push([])
    end
    @stack[index].push(val)
  end

  def pop
    val = @stack[index].pop
    if @stack[@index].length == 0
      @stack.pop()
      @index -=1
    end
    val
  end


end
